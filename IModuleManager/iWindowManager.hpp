#ifndef ODFAEG_IWINDOW_MANAGER
#define ODFAEG_IWINDOW_MANAGER
////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "iWindow.hpp"
#include "systemEvent.hpp"
namespace odfaeg {
/**
* \brief Interface for each window's manager.
*/
class IWindowManager
{
     public :
        /**
        *   \brief create a window and return a pointer to the window interface.
        *   \param the width of the window.
        *   \param the height of the window.
        *   \param the title of the window.
        */
        virtual IWindow * create(uint32_t , uint32_t , std::string && title) = 0;
        /**
        *   \brief create a window and return a pointer to the window interface.
        *   \param the width of the window. (0 by default)
        *   \param the height of the window. (0 by default)
        *   \param the title of the window. (empty by default)
        */
        virtual IWindow * create(uint32_t = 0 , uint32_t = 0 , std::string && title = "") = 0;
        /**
        * \brief get the last system event generated by the window.
        * \return the system event.
        */
        SystemEvent popEvent() = 0;
}
#endif // ODFAEG_IWINDOW_MANAGER
